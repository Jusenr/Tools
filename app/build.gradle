apply plugin: rootProject.ext.plugins.application

android {
    compileSdkVersion rootProject.ext.androids.compileSdkVersion
    buildToolsVersion rootProject.ext.androids.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.androids.applicationId
        minSdkVersion rootProject.ext.androids.minSdkVersion
        targetSdkVersion rootProject.ext.androids.targetSdkVersion
        versionCode rootProject.ext.androids.versionCode
        versionName rootProject.ext.androids.versionName
        manifestPlaceholders rootProject.ext.androids.manifestPlaceholders
        //Logcat log TAG settings
        buildConfigField "String", "LOG_TAG", "\"${rootProject.ext.APP_LOG_TAG}\""
        buildConfigField "String", "COMPILATION_TIME", "\"${rootProject.releaseTime("yyyy-MM-dd HH:mm")}\""
        //Default values must be given, otherwise other channel package domains are initialized to null.
        buildConfigField "boolean", "IS_TEST", "false"
        buildConfigField "int", "HOST_NOW", "1"
        multiDexEnabled true
        renderscriptTargetApi 20
        renderscriptSupportModeEnabled true
        testInstrumentationRunner "com.android.test.runner.MultiDexTestRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "x86"
        }
    }

    signingConfigs {
        release {
            storeFile file(SIGN_FILEPATH)
            storePassword SIGN_STOREPASSWORD
            keyAlias SIGN_KEYALIAS
            keyPassword SIGN_KEYPASSWORD
        }
    }

    buildTypes {
        release {
            // Show Log
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            // Show Log
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
    }

    //Product channel allocation
    productFlavors {
//        inner {
//            buildConfigField "boolean", "IS_TEST", "true"
//            buildConfigField "int", "HOST_NOW", "2"
//            versionName = "T" + rootProject.getVersionName()
//        }
//
//        dev {
//            buildConfigField "boolean", "IS_TEST", "true"
//            buildConfigField "int", "HOST_NOW", "3"
//            versionName = "D" + rootProject.getVersionName()
//        }

        online {
            versionName = "V" + rootProject.getVersionName()
        }

//        xiaomi { versionName = "V" + defaultConfig.versionName }
//        wandoujia { versionName = "V" + defaultConfig.versionName }
//        huawei { versionName = "V" + defaultConfig.versionName }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    //Apk package name customizations
    applicationVariants.all {
        variant ->
            def apkFileName = rootProject.getVersionName()
            def time = rootProject.releaseTime("yyyy-MM-dd")
            variant.outputs.each {
                output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = outputFile.name.replace(".apk", "-${apkFileName}-${time}.apk")
                        output.outputFile = new File(outputFile.parent, fileName)
                    }
            }
    }
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support:multidex-instrumentation:1.0.1') {
        exclude group: 'com.android.support', module: 'multidex'
    }
//    compile project(':toolslibrary')
    compile rootProject.ext.dependencies.androidtools

    testCompile rootProject.ext.dependencies.junit
    //View the App database usage (method: 1. release comment. 2. recompile. 3. use the'DebugDB'field to retrieve log. 4. and access the retrieved connection. OK)
    debugCompile rootProject.ext.dependencies.debug_db
    //Leakcanary
    debugCompile rootProject.ext.dependencies.leakcanary_android
    testCompile rootProject.ext.dependencies.leakcanary_android_no_op
    releaseCompile rootProject.ext.dependencies.leakcanary_android_no_op

    compile rootProject.ext.dependencies.constraint_layout
    compile rootProject.ext.dependencies.appcompat_v7

    compile rootProject.ext.dependencies.analytics

}

//After the compilation is finished, the unaligned package is removed
android.applicationVariants.all { variant ->
    variant.assemble.doLast {
        variant.outputs.each { output ->
            println "aligned " + output.outputFile
            println "unaligned " + output.packageApplication.outputFile

            File file = output.packageApplication.outputFile;
            if (variant.buildType.zipAlignEnabled && file.getName().contains("unaligned")) {
                println "deleting " + file.getName()
                file.delete()
            }
        }
    }
}