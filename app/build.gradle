apply plugin: rootProject.ext.plugins.application

android {
    compileSdkVersion rootProject.ext.androids.compileSdkVersion
    project.archivesBaseName = "appToolsTest"
    defaultConfig {
        applicationId rootProject.ext.androids.applicationId
        minSdkVersion rootProject.ext.androids.minSdkVersion
        targetSdkVersion rootProject.ext.androids.targetSdkVersion
        flavorDimensions "default"
        versionCode project.properties["PROJ_VERSIONCODE"] as int
        versionName rootProject.getVersionName()
        manifestPlaceholders rootProject.ext.androids.manifestPlaceholders
        multiDexEnabled true
//        renderscriptTargetApi 28
//        renderscriptSupportModeEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
        ndk {
            abiFilters "arm64-v8a", "armeabi-v7a", "x86", "x86_64"
        }
        //Logcat log TAG settings
        buildConfigField "String", "LOG_TAG", "\"${rootProject.ext.APP_LOG_TAG}\""
        buildConfigField "String", "COMPILATION_TIME", "\"${rootProject.releaseTime("yyyy-MM-dd HH:mm")}\""
        buildConfigField "String", "UMENG_APPKEY", "\"59a1173a7f2c747ef20009a3\""
        //Default values must be given, otherwise other channel package domains are initialized to null.
        buildConfigField "boolean", "IS_TEST", "false"
        buildConfigField "int", "HOST_NOW", "1"
    }

    signingConfigs {
        release {
            storeFile file(SIGN_FILEPATH)
            storePassword SIGN_STOREPASSWORD
            keyAlias SIGN_KEYALIAS
            keyPassword SIGN_KEYPASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java']
            jniLibs.srcDirs = ['libs']
            assets.srcDirs = ['src/main/assets']
        }
    }
    // Configure only for each module that uses Java 8
    // language features (either in its source code or
    // through dependencies).
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dexOptions {
        maxProcessCount 6 // this is the default value
        javaMaxHeapSize "4g"
    }

    //Product channel allocation
    productFlavors {
//        inner {
//            buildConfigField "boolean", "IS_TEST", "true"
//            buildConfigField "int", "HOST_NOW", "2"
//            versionName = "T" + rootProject.getVersionName()
//        }
//
//        dev {
//            buildConfigField "boolean", "IS_TEST", "true"
//            buildConfigField "int", "HOST_NOW", "3"
//            versionName = "D" + rootProject.getVersionName()
//        }

        online {
            versionName = "V" + rootProject.getVersionName()
        }

        productFlavors.all { flavor ->
            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]
        }
    }

    //Apk package name customizations
    applicationVariants.all { variant ->
        variant.outputs.all {
            if (outputFileName.endsWith('.apk')) {
                //这里使用之前定义apk文件名称
                outputFileName = "${project.archivesBaseName}_v${variant.productFlavors[0].versionName}_${variant.productFlavors[0].name}_${releaseTime("yyyyMMdd")}_${variant.buildType.name}.apk"
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation rootProject.ext.dependencies.runner
    androidTestImplementation rootProject.ext.dependencies.espresso_core

    implementation project(':toolslibrary')

//    compile rootProject.ext.dependencies.androidtools

    testImplementation rootProject.ext.dependencies.junit
    //View the App database usage (method: 1. release comment. 2. recompile. 3. use the'DebugDB'field to retrieve log. 4. and access the retrieved connection. OK)
    debugImplementation rootProject.ext.dependencies.debug_db
    //Leakcanary
    debugImplementation rootProject.ext.dependencies.leakcanary_android
    testImplementation rootProject.ext.dependencies.leakcanary_android_no_op
    releaseImplementation rootProject.ext.dependencies.leakcanary_android_no_op

    implementation rootProject.ext.dependencies.constraint_layout
    implementation rootProject.ext.dependencies.appcompat_v7

    implementation rootProject.ext.dependencies.permission
    implementation rootProject.ext.dependencies.butterknife

    implementation rootProject.ext.dependencies.fresco
    implementation rootProject.ext.dependencies.imagepipeline_okhttp3

    implementation rootProject.ext.dependencies.common
    implementation rootProject.ext.dependencies.analytics


    annotationProcessor rootProject.ext.dependencies.butterknife_compiler
}